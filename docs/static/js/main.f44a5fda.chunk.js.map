{"version":3,"sources":["components/CategoryAdd.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","catch","console","error","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAgBhD,OACE,qCACE,8CACA,sBAAMC,SAZW,SAACC,GACpBA,EAAMC,iBAEFJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,MAOd,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAjBlB,SAACP,GACzBF,EAAcE,EAAMQ,OAAOF,gB,+BCJlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAKFI,MAAMF,GALJ,cAKfG,EALe,gBAMEA,EAAKC,OANP,uBAMbC,EANa,EAMbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CAAEC,GAAID,EAAIC,GAAIC,MAAOF,EAAIE,MAAOV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARtD,kBAWdM,GAXc,4CAAH,sDCDPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACnC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,kCAAKA,EAAL,WCFOO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdd,mBAAS,CAAEqB,KAAM,GAAIa,SAAS,IADhB,mBACjCC,EADiC,KAC1BC,EAD0B,KAcxC,OAXAC,qBAAU,WACRxB,EAAQC,GACLwB,MAAK,SAACX,GACLS,EAAS,CACPf,KAAMM,EACNO,SAAS,OAGZK,MAAMC,QAAQC,SAChB,CAAC3B,IAEGqB,EDP2BO,CAAa5B,GAAjCa,EANyB,EAM/BN,KAAca,EANiB,EAMjBA,QAEtB,OACE,qCACE,qBAAIJ,UAAU,oCAAd,cAAoDhB,EAApD,OAECoB,GAAW,mBAAGJ,UAAU,mCAAb,yBAEZ,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEAjBkB,EAjBM,WAAO,IAAD,EACW3C,mBAAS,CAAC,eADrB,mBAClBQ,EADkB,KACNT,EADM,KAGzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACGS,EAAWe,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCRxB8B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.f44a5fda.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const CategoryAdd = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((categories) => [inputValue, ...categories]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <>\n      <h2>Category Add</h2>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n      </form>\n    </>\n  );\n};\n\nCategoryAdd.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","/**\n * @param {string} category\n */\nexport const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=5NukNlLtWLrxKiisvYn6JKUGyPdZQFBg`;\n\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n  const gifs = data.map((img) => {\n    return { id: img.id, title: img.title, url: img.images?.downsized_medium.url };\n  });\n\n  return gifs;\n};\n","import React from \"react\";\n\nexport const GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p> {title} </p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n  //   const [images, setImages] = useState([]);\n  //   useEffect(() => {\n  //     getGifs(category).then(setImages);\n  //   }, [category]); // esto se implemento porque cada vez que el componente cambiaba se necesitaba recargar, se traslada a custome hook\n\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\n\n      {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\n\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({ data: [], loading: true });\n\n  useEffect(() => {\n    getGifs(category)\n      .then((images) => {\n        setState({\n          data: images,\n          loading: false,\n        });\n      })\n      .catch(console.error);\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport { CategoryAdd } from \"./components/CategoryAdd\";\nimport { GifGrid } from \"./components/GifGrid\";\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"Over Watch\"]);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <CategoryAdd setCategories={setCategories} />\n      <hr />\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport GifExpertApp from \"./GifExpertApp\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}